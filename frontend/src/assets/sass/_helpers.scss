// Merge the maps
$theme-colors: map-merge($theme-colors, $custom-colors);

$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value");
$utilities-colors: map-merge($utilities-colors, $theme-colors-rgb);
$utilities-text-colors: map-loop($utilities-colors, rgba-css-var, "$key", "text");
$utilities-bg-colors: map-loop($utilities-colors, rgba-css-var, "$key", "bg");

@each $color-name, $color in $custom-colors {
    @each $breakpoint in $custom-breakpoints {
        $infix: if($breakpoint == "xs", "", "-#{$breakpoint}");
        
        @include media-breakpoint-up($breakpoint) {
            .bg#{$infix}-#{$color-name} {
                background-color: $color !important;
            }
        }
    }

    .bg-#{$color-name}-hover {
        transition: background-color 0.2s ease;
        
        &:hover {
            background-color: $color !important;
        }
    }
}

@each $color-name, $color in $custom-colors {
    @each $opacity in (10, 25, 50, 75) {
        .bg-#{$color-name}-#{$opacity} {
            background-color: rgba($color, calc($opacity / 100)) !important;
        }
    }
}

@each $breakpoint in $custom-breakpoints {

	$breakpoint-prefix: '-' + #{$breakpoint};

    @if $breakpoint == 'xs' {
        $breakpoint-prefix: '';
    }

    @each $size in $custom-font-sizes {

        @include media-breakpoint-up(#{$breakpoint}) {
            .font-size#{$breakpoint-prefix}-#{str-replace($size, '.', '-')} {
                font-size: #{$size};
            }

            .line-height#{$breakpoint-prefix}-#{str-replace($size, '.', '-')} {
                line-height: #{$size};
            }
        }
    }

    @each $size in $custom-width-sizes {

        @include media-breakpoint-up(#{$breakpoint}) {
            .w#{$breakpoint-prefix}-#{str-replace($size, '%', '')} {
                width: #{$size} !important;
            }

            .max-w#{$breakpoint-prefix}-#{str-replace($size, '%', '')} {
                max-width: #{$size} !important;
            }

            .min-w#{$breakpoint-prefix}-#{str-replace($size, '%', '')} {
                min-width: #{$size} !important;
            }

            .h#{$breakpoint-prefix}-#{str-replace($size, '%', '')} {
                height: #{$size} !important;
            }

            .max-height#{$breakpoint-prefix}-#{str-replace($size, '%', '')} {
                max-height: #{$size} !important;
            }

            .min-h#{$breakpoint-prefix}-#{str-replace($size, '%', '')} {
                min-height: #{$size} !important;
            }
        }
    }

    @include media-breakpoint-up(#{$breakpoint}) {

        .fw#{$breakpoint-prefix}-bold {
            font-weight: bold !important;
        }

        .fw#{$breakpoint-prefix}-semi-bold {
            font-weight: 600 !important;
        }

        .fw#{$breakpoint-prefix}-normal {
            font-weight: normal !important;
        }

        .fw#{$breakpoint-prefix}-light {
            font-weight: 300 !important;
        }
    }
}

table.border-bottom-none tr:last-of-type td {
    border: none !important;
    box-shadow: none !important;
}

.p-input {
    padding-top: 0.375rem !important;
    padding-bottom: 0.375rem !important;
}

.cursor-pointer {
    cursor: pointer !important;
}

.cursor-not-allowed {
    cursor: not-allowed !important;
}

@keyframes fade {
  from {
    opacity: 0;
  }
  to { 
    opacity: 1;
  }
}

@keyframes drop {
  from {
    visibility: hidden;
    transform: translateY(-10px);
  }
  to { 
    visibility: visible;
    transform: translateY(0);
  }
}

.animation-fade {
    opacity: 0;
    transition: opacity 1s linear;
    animation: fade .5s linear forwards;
}

.animation-drop {
    transition: transform .5s linear;
    animation: drop 1s linear forwards;
}

.animation-fade-in {
   animation: fadeInOpacity .5s linear forwards;
}

@keyframes fadeInOpacity {
    0% {
        opacity: .5;
    }
    100% {
        opacity: 1;
    }
}

.transition-width {
    transition: width .25s ease;
}
.transition-all {
    transition: all .15s ease;
}

.opacity-enter-active {
    transition: opacity .25s linear;
}
.opacity-leave-active {
    transition: opacity .25s linear;
}
.opacity-enter-from {
    opacity: 0;
}
.opacity-enter-to {
    opacity: 1;
}
.opacity-leave-from {
    opacity: 1;
}
.opacity-leave-to {
    opacity: 0;
}

.font-family-roboto {
    font-family: 'Roboto', sans-serif, system-ui, monospace !important;
}

.font-family-noto {
    font-family: 'Noto Serif', sans-serif, system-ui, monospace !important;
}

.font-family-inter {
    font-family: 'Inter', sans-serif, system-ui, monospace !important;
}

.form-label {
    font-family: 'Roboto', sans-serif, system-ui, monospace;
}

@keyframes pulse {
    0% {
        background-color: #eae3ff;
    }

    50% {
        transform: #f7f4ff;
    }

    100% {
        transform: #eae3ff;
    }
}

.pulse { 
    animation-name: pulse;
    animation-duration: 2s;
    animation-iteration-count: infinite;

    td {
        animation-name: pulse !important;
        animation-duration: 2s !important;
        animation-iteration-count: infinite !important;
    }
}

@keyframes scale {
    0% {
        transform: scale(0.85);
    }

    50% {
        transform: scale(1);
    }

    100% {
        transform: scale(0.85);
    }
}

.scale { 
    animation-name: scale;
    animation-duration: 2s;
    animation-iteration-count: infinite;
}

.bg-purple {
    background-color: $purple !important;
}

$sizing: (
    90: 90%,
    85: 85%,
    80: 80%,
    20: 20%,
    15: 15%,
    10: 10%,
);

// Utilities API, 
$utilities: map-merge($utilities, (
    "max-width": map-merge(
        map-get($utilities, "max-width"),
        (
            class: "max-w",
            values: map-merge(
                map-get(map-get($utilities, "max-width"), "values"),
                $sizing
            ),
        ),
    ),
    "max-height": map-merge(
        map-get($utilities, "max-height"),
        (
            class: "max-h",
            values: map-merge(
                map-get(map-get($utilities, "max-height"), "values"),
                $sizing
            ),
        ),
    ), 
    "background-color": (
        property: background-color,
        responsive: true,
        class: bg,
        values: $theme-colors,
        state: hover,
        css-var: true,
        css-variable-name: bg
    ),
));
